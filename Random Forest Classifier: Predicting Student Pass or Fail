{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP1hQdLs9sXtm2OBzf4tXVq",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Adaora-FutureAIEngineer/Adaora-s-Lab/blob/main/Untitled9.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "mSsc5meR30W9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b6e4c76e-c3a9-40d5-dd0d-e84a8c5fce9d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 100.0 %\n",
            "\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "          No       1.00      1.00      1.00         1\n",
            "         Yes       1.00      1.00      1.00         2\n",
            "\n",
            "    accuracy                           1.00         3\n",
            "   macro avg       1.00      1.00      1.00         3\n",
            "weighted avg       1.00      1.00      1.00         3\n",
            "\n",
            "  Actual Predicted\n",
            "8    Yes       Yes\n",
            "1     No        No\n",
            "5    Yes       Yes\n"
          ]
        }
      ],
      "source": [
        "# Random Forest Classifier Project\n",
        "# Predicting if a student will Pass or Fail\n",
        "\n",
        "# 1. Import libraries\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "\n",
        "# 2. Create sample dataset\n",
        "data = {\n",
        "    \"Hours_Studied\": [2, 4, 5, 6, 7, 8, 1, 3, 9, 10],\n",
        "    \"Classes_Attended\": [1, 3, 4, 4, 5, 6, 1, 2, 7, 8],\n",
        "    \"Pass\": [\"No\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"No\", \"Yes\", \"Yes\"]\n",
        "}\n",
        "\n",
        "df = pd.DataFrame(data)\n",
        "\n",
        "# 3. Features and labels\n",
        "X = df[[\"Hours_Studied\", \"Classes_Attended\"]]\n",
        "y = df[\"Pass\"]\n",
        "\n",
        "# 4. Split into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
        "\n",
        "# 5. Train Random Forest model\n",
        "rf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "rf_model.fit(X_train, y_train)\n",
        "\n",
        "# 6. Make predictions\n",
        "y_pred = rf_model.predict(X_test)\n",
        "\n",
        "# 7. Evaluate model\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(\"Accuracy:\", round(accuracy * 100, 2), \"%\")\n",
        "print(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred))\n",
        "\n",
        "# 8. Compare Actual vs Predicted\n",
        "result = pd.DataFrame({\"Actual\": y_test, \"Predicted\": y_pred})\n",
        "print(result)"
      ]
    }
  ]
}
